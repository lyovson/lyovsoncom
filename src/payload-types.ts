/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    posts: Post;
    media: Media;
    types: Type;
    topics: Topic;
    projects: Project;
    users: User;
    contacts: Contact;
    books: Book;
    movies: Movie;
    tvShows: TvShow;
    videoGames: VideoGame;
    people: Person;
    notes: Note;
    links: Link;
    redirects: Redirect;
    forms: Form;
    'form-submissions': FormSubmission;
    search: Search;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    posts: PostsSelect<false> | PostsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    types: TypesSelect<false> | TypesSelect<true>;
    topics: TopicsSelect<false> | TopicsSelect<true>;
    projects: ProjectsSelect<false> | ProjectsSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    contacts: ContactsSelect<false> | ContactsSelect<true>;
    books: BooksSelect<false> | BooksSelect<true>;
    movies: MoviesSelect<false> | MoviesSelect<true>;
    tvShows: TvShowsSelect<false> | TvShowsSelect<true>;
    videoGames: VideoGamesSelect<false> | VideoGamesSelect<true>;
    people: PeopleSelect<false> | PeopleSelect<true>;
    notes: NotesSelect<false> | NotesSelect<true>;
    links: LinksSelect<false> | LinksSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword:
    | {
        email: string;
      }
    | {
        username: string;
      };
  login:
    | {
        email: string;
        password: string;
      }
    | {
        password: string;
        username: string;
      };
  registerFirstUser: {
    password: string;
    username: string;
    email?: string;
  };
  unlock:
    | {
        email: string;
      }
    | {
        username: string;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: number;
  /**
   * The main title of your post
   */
  title: string;
  /**
   * Main image used in cards and social sharing
   */
  featuredImage?: (number | null) | Media;
  /**
   * Brief description for previews and SEO
   */
  description?: string | null;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Legacy type field (will be removed after migration)
   */
  type: number | Type;
  /**
   * What type of content is this?
   */
  typeSelect: 'article' | 'review' | 'video' | 'podcast' | 'photo';
  /**
   * Rate from 1-10 stars
   */
  rating?: number | null;
  /**
   * What are you reviewing? (can select multiple)
   */
  reference?:
    | (
        | {
            relationTo: 'books';
            value: number | Book;
          }
        | {
            relationTo: 'movies';
            value: number | Movie;
          }
        | {
            relationTo: 'tvShows';
            value: number | TvShow;
          }
        | {
            relationTo: 'videoGames';
            value: number | VideoGame;
          }
      )[]
    | null;
  /**
   * YouTube, Vimeo, or other video embed URL
   */
  videoEmbedUrl?: string | null;
  /**
   * Spotify, Apple Podcasts, or other podcast embed URL
   */
  podcastEmbedUrl?: string | null;
  /**
   * Tag this post with relevant topics
   */
  topics?: (number | Topic)[] | null;
  /**
   * Group this post into a series or project
   */
  project?: (number | null) | Project;
  /**
   * Books, movies, shows, games referenced in this post
   */
  references?:
    | (
        | {
            relationTo: 'books';
            value: number | Book;
          }
        | {
            relationTo: 'movies';
            value: number | Movie;
          }
        | {
            relationTo: 'tvShows';
            value: number | TvShow;
          }
        | {
            relationTo: 'videoGames';
            value: number | VideoGame;
          }
      )[]
    | null;
  /**
   * People mentioned or discussed in this post
   */
  personsMentioned?: (number | Person)[] | null;
  /**
   * Notes that connect to this post
   */
  notesReferenced?: (number | Note)[] | null;
  /**
   * Other posts that are related to this one
   */
  relatedPosts?: (number | Post)[] | null;
  /**
   * When this post should be published
   */
  publishedAt?: string | null;
  /**
   * Who authored this post
   */
  authors?: (number | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        name?: string | null;
        username?: string | null;
      }[]
    | null;
  /**
   * Pre-computed vector embedding for semantic search (auto-generated)
   */
  embedding?: {
    vector?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    model?: string | null;
    dimensions?: number | null;
    generatedAt?: string | null;
    textHash?: string | null;
  };
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt?: string | null;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "types".
 */
export interface Type {
  id: number;
  name: string;
  description?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Manage books for reviews and references
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "books".
 */
export interface Book {
  id: number;
  /**
   * The title of the book
   */
  title: string;
  /**
   * Brief description or summary of the book
   */
  description?: string | null;
  /**
   * Book cover image
   */
  coverImage?: (number | null) | Media;
  /**
   * Publication date
   */
  releaseDate?: string | null;
  /**
   * Authors of this book
   */
  creators?: (number | Person)[] | null;
  /**
   * Save Rafa's highlighted quotes from this book
   */
  rafasQuotes?:
    | {
        quote: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Save Jess's highlighted quotes from this book
   */
  jesssQuotes?:
    | {
        quote: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Pre-computed vector embedding for semantic search (auto-generated)
   */
  embedding?: {
    vector?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    model?: string | null;
    dimensions?: number | null;
    generatedAt?: string | null;
    textHash?: string | null;
  };
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "people".
 */
export interface Person {
  id: number;
  name: string;
  /**
   * Person's photo
   */
  photo?: (number | null) | Media;
  /**
   * Biography
   */
  bio?: string | null;
  /**
   * What roles does this person have?
   */
  roles?: ('author' | 'director' | 'actor' | 'musician' | 'developer' | 'publicFigure')[] | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "movies".
 */
export interface Movie {
  id: number;
  title: string;
  description?: string | null;
  /**
   * Movie poster image
   */
  coverImage?: (number | null) | Media;
  /**
   * Release date
   */
  releaseDate?: string | null;
  /**
   * Rafa's highlighted quotes from this movie
   */
  rafasQuotes?:
    | {
        quote: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Jess's highlighted quotes from this movie
   */
  jesssQuotes?:
    | {
        quote: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Directors, writers, etc.
   */
  creators?: (number | Person)[] | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tvShows".
 */
export interface TvShow {
  id: number;
  title: string;
  description?: string | null;
  /**
   * TV show poster image
   */
  coverImage?: (number | null) | Media;
  /**
   * First air date
   */
  releaseDate?: string | null;
  /**
   * Rafa's highlighted quotes from this TV show
   */
  rafasQuotes?:
    | {
        quote: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Jess's highlighted quotes from this TV show
   */
  jesssQuotes?:
    | {
        quote: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Creators, showrunners, etc.
   */
  creators?: (number | Person)[] | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "videoGames".
 */
export interface VideoGame {
  id: number;
  title: string;
  description?: string | null;
  /**
   * Game cover art
   */
  coverImage?: (number | null) | Media;
  /**
   * Release date
   */
  releaseDate?: string | null;
  /**
   * Rafa's highlighted quotes from this game
   */
  rafasQuotes?:
    | {
        quote: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Jess's highlighted quotes from this game
   */
  jesssQuotes?:
    | {
        quote: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Developers, designers, etc.
   */
  creators?: (number | Person)[] | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "topics".
 */
export interface Topic {
  id: number;
  name: string;
  description?: string | null;
  /**
   * Hex color code (e.g. #FF0000). Leave empty to inherit from parent.
   */
  color?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  parent?: (number | null) | Topic;
  breadcrumbs?:
    | {
        doc?: (number | null) | Topic;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects".
 */
export interface Project {
  id: number;
  name: string;
  description?: string | null;
  image?: (number | null) | Media;
  /**
   * The Audience ID from Resend for managing newsletter subscriptions.
   */
  resendAudienceId?: string | null;
  /**
   * List of contacts associated with this project.
   */
  contacts?: (number | Contact)[] | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contacts".
 */
export interface Contact {
  id: number;
  email: string;
  firstName?: string | null;
  lastName?: string | null;
  /**
   * Token used for email confirmation
   */
  confirmationToken?: string | null;
  /**
   * When the confirmation token expires
   */
  confirmationExpiry?: string | null;
  /**
   * Indicates if the contact has unsubscribed.
   */
  unsubscribed?: boolean | null;
  status?: ('pending' | 'active' | 'unsubscribed') | null;
  /**
   * The project this contact is associated with.
   */
  project: number | Project;
  /**
   * The unique Contact ID from Resend.
   */
  resendContactId?: string | null;
  /**
   * The date and time the contact subscribed.
   */
  subscribedAt?: string | null;
  /**
   * Optional notes about the contact.
   */
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notes".
 */
export interface Note {
  id: number;
  /**
   * The main title of your note
   */
  title: string;
  /**
   * Who wrote this note?
   */
  author: 'rafa' | 'jess';
  /**
   * Who can see this note?
   */
  visibility: 'public';
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Connect this note to other content in your knowledge base
   */
  connections?:
    | (
        | {
            relationTo: 'posts';
            value: number | Post;
          }
        | {
            relationTo: 'books';
            value: number | Book;
          }
        | {
            relationTo: 'movies';
            value: number | Movie;
          }
        | {
            relationTo: 'tvShows';
            value: number | TvShow;
          }
        | {
            relationTo: 'videoGames';
            value: number | VideoGame;
          }
        | {
            relationTo: 'people';
            value: number | Person;
          }
        | {
            relationTo: 'notes';
            value: number | Note;
          }
      )[]
    | null;
  /**
   * When this note should be published
   */
  publishedAt?: string | null;
  /**
   * Pre-computed vector embedding for semantic search (auto-generated)
   */
  embedding?: {
    vector?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    model?: string | null;
    dimensions?: number | null;
    generatedAt?: string | null;
    textHash?: string | null;
  };
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
  email?: string | null;
  username: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "links".
 */
export interface Link {
  id: number;
  /**
   * Description of what this link is
   */
  label: string;
  /**
   * The URL this link points to
   */
  url: string;
  /**
   * What type of content is this link attached to?
   */
  referenceType: 'books' | 'movies' | 'tvShows' | 'videoGames' | 'posts' | 'people' | 'notes' | 'projects';
  /**
   * The specific item this link is attached to
   */
  reference:
    | {
        relationTo: 'books';
        value: number | Book;
      }
    | {
        relationTo: 'movies';
        value: number | Movie;
      }
    | {
        relationTo: 'tvShows';
        value: number | TvShow;
      }
    | {
        relationTo: 'videoGames';
        value: number | VideoGame;
      }
    | {
        relationTo: 'posts';
        value: number | Post;
      }
    | {
        relationTo: 'people';
        value: number | Person;
      }
    | {
        relationTo: 'notes';
        value: number | Note;
      }
    | {
        relationTo: 'projects';
        value: number | Project;
      };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: number;
  /**
   * You will need to rebuild the website when changing this field.
   */
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?: {
      relationTo: 'posts';
      value: number | Post;
    } | null;
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: number;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: number;
  form: number | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: number;
  title?: string | null;
  priority?: number | null;
  doc: {
    relationTo: 'posts';
    value: number | Post;
  };
  slug?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: (number | null) | Media;
  };
  topics?:
    | {
        relationTo?: string | null;
        id?: string | null;
        title?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'posts';
        value: number | Post;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'types';
        value: number | Type;
      } | null)
    | ({
        relationTo: 'topics';
        value: number | Topic;
      } | null)
    | ({
        relationTo: 'projects';
        value: number | Project;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'contacts';
        value: number | Contact;
      } | null)
    | ({
        relationTo: 'books';
        value: number | Book;
      } | null)
    | ({
        relationTo: 'movies';
        value: number | Movie;
      } | null)
    | ({
        relationTo: 'tvShows';
        value: number | TvShow;
      } | null)
    | ({
        relationTo: 'videoGames';
        value: number | VideoGame;
      } | null)
    | ({
        relationTo: 'people';
        value: number | Person;
      } | null)
    | ({
        relationTo: 'notes';
        value: number | Note;
      } | null)
    | ({
        relationTo: 'links';
        value: number | Link;
      } | null)
    | ({
        relationTo: 'redirects';
        value: number | Redirect;
      } | null)
    | ({
        relationTo: 'forms';
        value: number | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: number | FormSubmission;
      } | null)
    | ({
        relationTo: 'search';
        value: number | Search;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  featuredImage?: T;
  description?: T;
  content?: T;
  type?: T;
  typeSelect?: T;
  rating?: T;
  reference?: T;
  videoEmbedUrl?: T;
  podcastEmbedUrl?: T;
  topics?: T;
  project?: T;
  references?: T;
  personsMentioned?: T;
  notesReferenced?: T;
  relatedPosts?: T;
  publishedAt?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        name?: T;
        username?: T;
      };
  embedding?:
    | T
    | {
        vector?: T;
        model?: T;
        dimensions?: T;
        generatedAt?: T;
        textHash?: T;
      };
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "types_select".
 */
export interface TypesSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "topics_select".
 */
export interface TopicsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  color?: T;
  slug?: T;
  slugLock?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects_select".
 */
export interface ProjectsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  image?: T;
  resendAudienceId?: T;
  contacts?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  username?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contacts_select".
 */
export interface ContactsSelect<T extends boolean = true> {
  email?: T;
  firstName?: T;
  lastName?: T;
  confirmationToken?: T;
  confirmationExpiry?: T;
  unsubscribed?: T;
  status?: T;
  project?: T;
  resendContactId?: T;
  subscribedAt?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "books_select".
 */
export interface BooksSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  coverImage?: T;
  releaseDate?: T;
  creators?: T;
  rafasQuotes?:
    | T
    | {
        quote?: T;
        id?: T;
      };
  jesssQuotes?:
    | T
    | {
        quote?: T;
        id?: T;
      };
  embedding?:
    | T
    | {
        vector?: T;
        model?: T;
        dimensions?: T;
        generatedAt?: T;
        textHash?: T;
      };
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "movies_select".
 */
export interface MoviesSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  coverImage?: T;
  releaseDate?: T;
  rafasQuotes?:
    | T
    | {
        quote?: T;
        id?: T;
      };
  jesssQuotes?:
    | T
    | {
        quote?: T;
        id?: T;
      };
  creators?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tvShows_select".
 */
export interface TvShowsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  coverImage?: T;
  releaseDate?: T;
  rafasQuotes?:
    | T
    | {
        quote?: T;
        id?: T;
      };
  jesssQuotes?:
    | T
    | {
        quote?: T;
        id?: T;
      };
  creators?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "videoGames_select".
 */
export interface VideoGamesSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  coverImage?: T;
  releaseDate?: T;
  rafasQuotes?:
    | T
    | {
        quote?: T;
        id?: T;
      };
  jesssQuotes?:
    | T
    | {
        quote?: T;
        id?: T;
      };
  creators?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "people_select".
 */
export interface PeopleSelect<T extends boolean = true> {
  name?: T;
  photo?: T;
  bio?: T;
  roles?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notes_select".
 */
export interface NotesSelect<T extends boolean = true> {
  title?: T;
  author?: T;
  visibility?: T;
  content?: T;
  connections?: T;
  publishedAt?: T;
  embedding?:
    | T
    | {
        vector?: T;
        model?: T;
        dimensions?: T;
        generatedAt?: T;
        textHash?: T;
      };
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "links_select".
 */
export interface LinksSelect<T extends boolean = true> {
  label?: T;
  url?: T;
  referenceType?: T;
  reference?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  slug?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  topics?:
    | T
    | {
        relationTo?: T;
        id?: T;
        title?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock".
 */
export interface BannerBlock {
  style: 'info' | 'warning' | 'error' | 'success';
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'banner';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CodeBlock".
 */
export interface CodeBlock {
  language?: ('typescript' | 'javascript' | 'css') | null;
  code: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'code';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  media: number | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "YouTubeBlock".
 */
export interface YouTubeBlock {
  /**
   * Enter a YouTube URL (e.g., https://www.youtube.com/watch?v=dQw4w9WgXcQ) or video ID
   */
  videoId: string;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  aspectRatio?: ('16:9' | '4:3' | '1:1') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'youtube';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "XPostBlock".
 */
export interface XPostBlock {
  /**
   * Enter an X (Twitter) post URL (e.g., https://x.com/username/status/123456789) or post ID
   */
  postId: string;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'xpost';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "QuoteBlock".
 */
export interface QuoteBlock {
  quote: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  attribution?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'quote';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "GIFBlock".
 */
export interface GIFBlock {
  embedCode: {
    /**
     * Paste the full embed code from Tenor (click Share > Embed)
     */
    raw: string;
    postId?: string | null;
    aspectRatio?: string | null;
  };
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'gif';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}