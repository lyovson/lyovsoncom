---
description: 
globs: 
alwaysApply: false
---
---
description: Main rules
globs: 
alwaysApply: true
---
# Project Rules for Individuum Casting

## Overview
- **Purpose**: Individuum Casting is a multilingual website for Armenia's leading casting studio, hosted at `individuum.am`. Its primary goal is to manage casting registrations, with a secondary aim of providing entertainment news for ad monetization.
- **Features**: Includes casting registration, news articles, portfolio projects, photo/video studio and academy pages, plus standard business pages (about, contact).
- **Tech Stack**: Built with Next.js 15+, Payload CMS 3+, React 19+, Neon Postgres, Vercel Blob, Tailwind CSS 4+, ShadcnUI, next-intl, next-themes, and motion.
- **Localization**: Supports Armenian (`hy`), Russian (`ru`), and English (`en`) via Payload CMS (backend) and `next-intl` (frontend).
- **Translation Management**: Uses next-intl split plugin for modular translation organization:
  - Each feature/page has its own directory in `src/messages/{locale}/` with an `index.json` file
  - New features should create a dedicated directory (e.g., `src/messages/en/news/index.json`)
  - Common translations are stored in `src/messages/{locale}/common/index.json`
  - Consolidated files (`src/messages/{locale}.json`) are auto-generated and should not be edited directly
  - Always add translations for all supported languages (en, ru, hy)
- **Theming**: Features a black-white-gold Hollywood/James Bond classy style, defined in `globals.css`.

## Development Guidelines

### Tech Stack Usage
- Use Next.js 15+, Payload CMS 3+, React 19+, Neon Postgres, Vercel Blob, Tailwind CSS 4+, ShadcnUI, `next-intl`, `next-themes`, and `motion` for all features.
- Leverage built-in features of Payload and Next.js before adding third-party libraries.

### Component Architecture
- Prefer server components; use client components only for interactive edges (marked `'use client'`).
- Fetch data in server components; use the `use` hook with Suspense for client-side fetching when necessary.
- Keep state on the server (via DB) or URL (params, queries). Use `useReducer` for complex client-side state.

### Server Actions
- Use server actions and `useActionState` for form handling instead of fetch requests or client-side logic.
- Avoid `useEffect` for data fetching.

### Styling
- Use Tailwind CSS 4+ in `globals.css` (no `tailwind.config.ts` needed). Write Tailwind over raw CSS unless unavoidable.
- Implement light/dark themes with `next-themes` and `.dark` class in `globals.css`. Use `--gold` for branding consistency.
- Apply modern CSS (Grid, Flexbox, variables); don't optimize for old browsers.

### TypeScript
- Enforce strict mode (`tsconfig.json`): `strict: true`, `noUncheckedIndexedAccess`, etc. Prefer types over interfaces; avoid enums.
- Use path aliases: `@/` for `src/`, `@payload-config` for `payload.config.ts`.

### Code Organization
- Name files with kebab-case (e.g., `article-card.tsx` or `/article-card/index.tsx`).
- Keep components, functions, and files small. Refactor aggressively following DRY principles.
- Store custom components in `@/components/`, utilities in `@/utilities/`, and Payload collections in `src/collections/`.
- Don't modify `components/ui/` (ShadcnUI) or `(payload)` routes.
- Prefer named exports / imports to default ones.

### Animation
- Push animations to leaf components with `import { motion } from 'motion/react'` to minimize `'use client'` usage.

### Database
- Use Payload's built-in Postgres support via `vercelPostgresAdapter` for all DB operations.

### Accessibility
- Write semantic HTML and ensure full accessibility (e.g., ARIA roles, keyboard navigation).

### Optimization
- Optimize images with `sharp` via Payload; `images.unoptimized: true` in `next.config.ts`.
- Prioritize functional patterns: pure functions, immutability, small units.

### React Compiler
- Rely on React Compiler; avoid `useMemo`, `useCallback`, etc.

## Development Tools

### Linting and Formatting
- Run `pnpm lint` with ESLint (`next/core-web-vitals`, `next/typescript`) and `pnpm format` with Prettier (`singleQuote: true`, `trailingComma: all`).
- Warn on TS comments, `any` types, and unused vars (ignoring `_` prefixes) per `eslint.config.mjs`.
- Lint and format markdown files (.md, .mdx, .mdc etc) with markdownlint

### Environment Variables
- Define in `.env.local` for dev and Vercel env vars for prod: `NEXT_PUBLIC_SERVER_URL`, `POSTGRES_URL`, `BLOB_READ_WRITE_TOKEN`, `PAYLOAD_SECRET`, `CRON_SECRET`.
- Next.js handles `.env` loading automatically.

### Version Control
- Use GitHub with a simple Git workflow: push to GitHub, auto-deploy to Vercel from `main`.
- No strict commit conventions; keep messages clear.

### Deployment
- Deploy to `individuum.am` via Vercel with `pnpm build`. Sitemaps generated post-build via `next-sitemap`.
- Dev server runs at `localhost:3000` with `pnpm dev` (uses Turbopack).

### Documentation
- Store project docs (e.g., guides, notes) in `project/` folder.
- Use `README.md` for GitHub-specific info (e.g., setup, overview).
- Add inline comments for complex logic.

- Security/SEO/Accessibility: Use Next.js, Payload, and React built-ins to address these.

March 08, 2025 (reference point for stack versions).

